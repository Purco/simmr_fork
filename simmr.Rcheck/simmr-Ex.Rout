
R version 4.2.3 (2023-03-15) -- "Shortstop Beagle"
Copyright (C) 2023 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin22.3.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "simmr"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "simmr-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('simmr')
Loading required package: R2jags
Loading required package: rjags
Loading required package: coda
Linked to JAGS 4.3.2
Loaded modules: basemod,bugs

Attaching package: ‘R2jags’

The following object is masked from ‘package:coda’:

    traceplot

Loading required package: ggplot2
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("combine_sources")
> ### * combine_sources
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: combine_sources
> ### Title: Combine the dietary proportions from two food sources after
> ###   running simmr
> ### Aliases: combine_sources
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # The data
> ##D data(geese_data)
> ##D 
> ##D # Load into simmr
> ##D 
> ##D # Plot
> ##D plot(simmr_1)
> ##D 
> ##D # Print
> ##D simmr_1
> ##D 
> ##D # MCMC run
> ##D simmr_1_out <- simmr_mcmc(simmr_1)
> ##D 
> ##D # Print it
> ##D print(simmr_1_out)
> ##D 
> ##D # Summary
> ##D summary(simmr_1_out)
> ##D summary(simmr_1_out, type = "diagnostics")
> ##D summary(simmr_1_out, type = "correlations")
> ##D summary(simmr_1_out, type = "statistics")
> ##D ans <- summary(simmr_1_out, type = c("quantiles", "statistics"))
> ##D 
> ##D # Plot
> ##D plot(simmr_1_out)
> ##D plot(simmr_1_out, type = "boxplot")
> ##D plot(simmr_1_out, type = "histogram")
> ##D plot(simmr_1_out, type = "density")
> ##D plot(simmr_1_out, type = "matrix")
> ##D 
> ##D plot(simmr_out_combine$input)
> ##D plot(simmr_out_combine, type = "boxplot", title = "simmr output: combined sources")
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("combine_sources", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("compare_groups")
> ### * compare_groups
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: compare_groups
> ### Title: Compare dietary proportions for a single source across different
> ###   groups
> ### Aliases: compare_groups
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(geese_data)
> ##D simmr_in <- with(
> ##D   geese_data,
> ##D   simmr_load(
> ##D     mixtures = mixtures,
> ##D     source_names = source_names,
> ##D     source_means = source_means,
> ##D     source_sds = source_sds,
> ##D     correction_means = correction_means,
> ##D     correction_sds = correction_sds,
> ##D     concentration_means = concentration_means,
> ##D     group = groups
> ##D   )
> ##D )
> ##D 
> ##D # Print
> ##D simmr_in
> ##D 
> ##D # Plot
> ##D plot(simmr_in,
> ##D   group = 1:8, xlab = expression(paste(delta^13, "C (\\u2030)", sep = "")),
> ##D   ylab = expression(paste(delta^15, "N (\\u2030)", sep = "")),
> ##D   title = "Isospace plot of Inger et al Geese data"
> ##D )
> ##D 
> ##D # Run MCMC for each group
> ##D simmr_out <- simmr_mcmc(simmr_in)
> ##D 
> ##D # Print output
> ##D simmr_out
> ##D 
> ##D # Summarise output
> ##D summary(simmr_out, type = "quantiles", group = 1)
> ##D summary(simmr_out, type = "quantiles", group = c(1, 3))
> ##D summary(simmr_out, type = c("quantiles", "statistics"), group = c(1, 3))
> ##D 
> ##D # Plot - only a single group allowed
> ##D plot(simmr_out, type = "boxplot", group = 2, title = "simmr output group 2")
> ##D plot(simmr_out, type = c("density", "matrix"), grp = 6, title = "simmr output group 6")
> ##D 
> ##D # Compare groups
> ##D compare_groups(simmr_out, source = "Zostera", groups = 1:2)
> ##D compare_groups(simmr_out, source = "Zostera", groups = 1:3)
> ##D compare_groups(simmr_out, source = "U.lactuca", groups = c(4:5, 7, 2))
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("compare_groups", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("compare_sources")
> ### * compare_sources
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: compare_sources
> ### Title: Compare dietary proportions between multiple sources
> ### Aliases: compare_sources
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(geese_data_day1)
> ##D 
> ##D # Plot
> ##D plot(simmr_1)
> ##D 
> ##D # Print
> ##D simmr_1
> ##D 
> ##D # MCMC run
> ##D simmr_1_out <- simmr_mcmc(simmr_1)
> ##D 
> ##D # Print it
> ##D print(simmr_1_out)
> ##D 
> ##D # Summary
> ##D summary(simmr_1_out)
> ##D summary(simmr_1_out, type = "diagnostics")
> ##D summary(simmr_1_out, type = "correlations")
> ##D summary(simmr_1_out, type = "statistics")
> ##D ans <- summary(simmr_1_out, type = c("quantiles", "statistics"))
> ##D 
> ##D # Plot
> ##D plot(simmr_1_out, type = "boxplot")
> ##D plot(simmr_1_out, type = "histogram")
> ##D plot(simmr_1_out, type = "density")
> ##D plot(simmr_1_out, type = "matrix")
> ##D 
> ##D # Compare two sources
> ##D compare_sources(simmr_1_out, source_names = c("Zostera", "Grass"))
> ##D 
> ##D # Compare multiple sources
> ##D compare_sources(simmr_1_out)
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("compare_sources", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.simmr_input")
> ### * plot.simmr_input
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.simmr_input
> ### Title: Plot the 'simmr_input' data created from 'simmr_load'
> ### Aliases: plot.simmr_input
> 
> ### ** Examples
> 
> 
> # A simple example with 10 observations, 4 food sources and 2 tracers
> data(geese_data_day1)
> simmr_1 <- with(
+   geese_data_day1,
+   simmr_load(
+     mixtures = mixtures,
+     source_names = source_names,
+     source_means = source_means,
+     source_sds = source_sds,
+     correction_means = correction_means,
+     correction_sds = correction_sds,
+     concentration_means = concentration_means
+   )
+ )
> 
> # Plot
> plot(simmr_1)
> 
> ### A more complicated example with 30 obs, 3 tracers and 4 sources
> data(simmr_data_2)
> simmr_3 <- with(
+   simmr_data_2,
+   simmr_load(
+     mixtures = mixtures,
+     source_names = source_names,
+     source_means = source_means,
+     source_sds = source_sds,
+     correction_means = correction_means,
+     correction_sds = correction_sds,
+     concentration_means = concentration_means
+   )
+ )
> 
> # Plot 3 times - first default d13C vs d15N
> plot(simmr_3)
> # Now plot d15N vs d34S
> plot(simmr_3, tracers = c(2, 3))
> # and finally d13C vs d34S
> plot(simmr_3, tracers = c(1, 3))
> # See vignette('simmr') for fancier x-axis labels
> 
> # An example with multiple groups - the Geese data from Inger et al 2006
> data(geese_data)
> simmr_4 <- with(
+   geese_data,
+   simmr_load(
+     mixtures = mixtures,
+     source_names = source_names,
+     source_means = source_means,
+     source_sds = source_sds,
+     correction_means = correction_means,
+     correction_sds = correction_sds,
+     concentration_means = concentration_means,
+     group = groups
+   )
+ )
> 
> # Print
> simmr_4
This is a valid simmr input object with 251 observations, 2 tracers, and 4 sources.
There are 8 groups.
The source names are: Zostera, Grass, U.lactuca, Enteromorpha.
The tracer names are: d13C_Pl, d15N_Pl.

> 
> # Plot
> plot(simmr_4,
+   xlab = expression(paste(delta^13, "C (\u2030)", sep = "")),
+   ylab = expression(paste(delta^15, "N (\u2030)", sep = "")),
+   title = "Isospace plot of Inger et al Geese data"
+ ) #'
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  font metrics unknown for Unicode character U+2030
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  font metrics unknown for Unicode character U+2030
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  font metrics unknown for Unicode character U+2030
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  font metrics unknown for Unicode character U+2030
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  font metrics unknown for Unicode character U+2030
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  font metrics unknown for Unicode character U+2030
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  font metrics unknown for Unicode character U+2030
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  font metrics unknown for Unicode character U+2030
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  font metrics unknown for Unicode character U+2030
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  font metrics unknown for Unicode character U+2030
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  font metrics unknown for Unicode character U+2030
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  font metrics unknown for Unicode character U+2030
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  font metrics unknown for Unicode character U+2030
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  font metrics unknown for Unicode character U+2030
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  font metrics unknown for Unicode character U+2030
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  font metrics unknown for Unicode character U+2030
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  font metrics unknown for Unicode character U+2030
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  font metrics unknown for Unicode character U+2030
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  font metrics unknown for Unicode character U+2030
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  font metrics unknown for Unicode character U+2030
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  font metrics unknown for Unicode character U+2030
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  font metrics unknown for Unicode character U+2030
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  font metrics unknown for Unicode character U+2030
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  font metrics unknown for Unicode character U+2030
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  font metrics unknown for Unicode character U+2030
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  font metrics unknown for Unicode character U+2030
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'C (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  font metrics unknown for Unicode character U+2030
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  font metrics unknown for Unicode character U+2030
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  font metrics unknown for Unicode character U+2030
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  font metrics unknown for Unicode character U+2030
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  font metrics unknown for Unicode character U+2030
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  font metrics unknown for Unicode character U+2030
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <b0>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <e2>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <80>
Warning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :
  conversion failure on 'N (‰)' in 'mbcsToSbcs': dot substituted for <b0>
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.simmr_input", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plot.simmr_output")
> ### * plot.simmr_output
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: plot.simmr_output
> ### Title: Plot different features of an object created from 'simmr_mcmc'
> ###   or 'simmr_ffvb'.
> ### Aliases: plot.simmr_output
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # A simple example with 10 observations, 2 tracers and 4 sources
> ##D 
> ##D # The data
> ##D data(geese_data)
> ##D 
> ##D # Load into simmr
> ##D # Plot
> ##D plot(simmr_1)
> ##D 
> ##D 
> ##D # MCMC run
> ##D simmr_1_out <- simmr_mcmc(simmr_1)
> ##D 
> ##D # Plot
> ##D plot(simmr_1_out) # Creates all 4 plots
> ##D plot(simmr_1_out, type = "boxplot")
> ##D plot(simmr_1_out, type = "histogram")
> ##D plot(simmr_1_out, type = "density")
> ##D plot(simmr_1_out, type = "matrix")
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plot.simmr_output", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("posterior_predictive")
> ### * posterior_predictive
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: posterior_predictive
> ### Title: Plot the posterior predictive distribution for a simmr run
> ### Aliases: posterior_predictive
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(geese_data_day1)
> ##D simmr_1 <- with(
> ##D   geese_data_day1,
> ##D   simmr_load(
> ##D     mixtures = mixtures,
> ##D     source_names = source_names,
> ##D     source_means = source_means,
> ##D     source_sds = source_sds,
> ##D     correction_means = correction_means,
> ##D     correction_sds = correction_sds,
> ##D     concentration_means = concentration_means
> ##D   )
> ##D )
> ##D 
> ##D # Plot
> ##D plot(simmr_1)
> ##D 
> ##D # Print
> ##D simmr_1
> ##D 
> ##D # MCMC run
> ##D simmr_1_out <- simmr_mcmc(simmr_1)
> ##D 
> ##D # Prior predictive
> ##D post_pred <- posterior_predictive(simmr_1_out)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("posterior_predictive", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("prior_viz")
> ### * prior_viz
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: prior_viz
> ### Title: Plot the prior distribution for a simmr run
> ### Aliases: prior_viz
> 
> ### ** Examples
> 
> ## Not run: 
> ##D data(geese_data_day1)
> ##D simmr_1 <- with(
> ##D   geese_data_day1,
> ##D   simmr_load(
> ##D     mixtures = mixtures,
> ##D     source_names = source_names,
> ##D     source_means = source_means,
> ##D     source_sds = source_sds,
> ##D     correction_means = correction_means,
> ##D     correction_sds = correction_sds,
> ##D     concentration_means = concentration_means
> ##D   )
> ##D )
> ##D 
> ##D # Plot
> ##D plot(simmr_1)
> ##D 
> ##D # Print
> ##D simmr_1
> ##D 
> ##D # MCMC run
> ##D simmr_1_out <- simmr_mcmc(simmr_1)
> ##D 
> ##D # Prior predictive
> ##D prior <- prior_viz(simmr_1_out)
> ##D head(prior$p_prior_sim)
> ##D summary(prior$p_prior_sim)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("prior_viz", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("simmr")
> ### * simmr
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: simmr
> ### Title: simmr: A package for fitting stable isotope mixing models via
> ###   JAGS in R
> ### Aliases: simmr
> ### Keywords: multivariate
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # A first example with 2 tracers (isotopes), 10 observations, and 4 food sources
> ##D data(geese_data_day1)
> ##D simmr_in <- with(
> ##D   geese_data_day1,
> ##D   simmr_load(
> ##D     mixtures = mixtures,
> ##D     source_names = source_names,
> ##D     source_means = source_means,
> ##D     source_sds = source_sds,
> ##D     correction_means = correction_means,
> ##D     correction_sds = correction_sds,
> ##D     concentration_means = concentration_means
> ##D   )
> ##D )
> ##D 
> ##D # Plot
> ##D plot(simmr_in)
> ##D 
> ##D # MCMC run
> ##D simmr_out <- simmr_mcmc(simmr_in)
> ##D 
> ##D # Check convergence - values should all be close to 1
> ##D summary(simmr_out, type = "diagnostics")
> ##D 
> ##D # Look at output
> ##D summary(simmr_out, type = "statistics")
> ##D 
> ##D # Look at influence of priors
> ##D prior_viz(simmr_out)
> ##D 
> ##D # Plot output
> ##D plot(simmr_out, type = "histogram")
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("simmr", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("simmr_elicit")
> ### * simmr_elicit
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: simmr_elicit
> ### Title: Function to allow informative prior distribution to be included
> ###   in simmr
> ### Aliases: simmr_elicit
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # Data set: 10 observations, 2 tracers, 4 sources
> ##D data(geese_data_day1)
> ##D simmr_1 <- with(
> ##D   geese_data_day1,
> ##D   simmr_load(
> ##D     mixtures = mixtures,
> ##D     source_names = source_names,
> ##D     source_means = source_means,
> ##D     source_sds = source_sds,
> ##D     correction_means = correction_means,
> ##D     correction_sds = correction_sds,
> ##D     concentration_means = concentration_means
> ##D   )
> ##D )
> ##D 
> ##D # MCMC run
> ##D simmr_1_out <- simmr_mcmc(simmr_1)
> ##D 
> ##D # Look at the prior influence
> ##D prior_viz(simmr_1_out)
> ##D 
> ##D # Summary
> ##D summary(simmr_1_out, "quantiles")
> ##D # A bit vague:
> ##D #           2.5%   25%   50%   75% 97.5%
> ##D # Source A 0.029 0.115 0.203 0.312 0.498
> ##D # Source B 0.146 0.232 0.284 0.338 0.453
> ##D # Source C 0.216 0.255 0.275 0.296 0.342
> ##D # Source D 0.032 0.123 0.205 0.299 0.465
> ##D 
> ##D # Now suppose I had prior information that:
> ##D # proportion means = 0.5,0.2,0.2,0.1
> ##D # proportion sds = 0.08,0.02,0.01,0.02
> ##D prior <- simmr_elicit(4, c(0.5, 0.2, 0.2, 0.1), c(0.08, 0.02, 0.01, 0.02))
> ##D 
> ##D simmr_1a_out <- simmr_mcmc(simmr_1, prior_control = list(means = prior$mean, sd = prior$sd))
> ##D 
> ##D #' # Look at the prior influence now
> ##D prior_viz(simmr_1a_out)
> ##D 
> ##D summary(simmr_1a_out, "quantiles")
> ##D # Much more precise:
> ##D #           2.5%   25%   50%   75% 97.5%
> ##D # Source A 0.441 0.494 0.523 0.553 0.610
> ##D # Source B 0.144 0.173 0.188 0.204 0.236
> ##D # Source C 0.160 0.183 0.196 0.207 0.228
> ##D # Source D 0.060 0.079 0.091 0.105 0.135
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("simmr_elicit", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("simmr_ffvb")
> ### * simmr_ffvb
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: simmr_ffvb
> ### Title: Run a 'simmr_input' object through the Fixed Form Variational
> ###   Vayes(FFVB) function
> ### Aliases: simmr_ffvb
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## See the package vignette for a detailed run through of these 4 examples
> ##D 
> ##D # Data set 1: 10 obs on 2 isos, 4 sources, with tefs and concdep
> ##D data(geese_data_day1)
> ##D simmr_1 <- with(
> ##D   geese_data_day1,
> ##D   simmr_load(
> ##D     mixtures = mixtures,
> ##D     source_names = source_names,
> ##D     source_means = source_means,
> ##D     source_sds = source_sds,
> ##D     correction_means = correction_means,
> ##D     correction_sds = correction_sds,
> ##D     concentration_means = concentration_means
> ##D   )
> ##D )
> ##D 
> ##D # Plot
> ##D plot(simmr_1)
> ##D 
> ##D # Print
> ##D simmr_1
> ##D 
> ##D # FFVB run
> ##D simmr_1_out <- simmr_ffvb(simmr_1)
> ##D 
> ##D # Print it
> ##D print(simmr_1_out)
> ##D 
> ##D # Summary
> ##D summary(simmr_1_out, type = "correlations")
> ##D summary(simmr_1_out, type = "statistics")
> ##D ans <- summary(simmr_1_out, type = c("quantiles", "statistics"))
> ##D 
> ##D # Plot
> ##D plot(simmr_1_out, type = "boxplot")
> ##D plot(simmr_1_out, type = "histogram")
> ##D plot(simmr_1_out, type = "density")
> ##D plot(simmr_1_out, type = "matrix")
> ##D 
> ##D # Compare two sources
> ##D compare_sources(simmr_1_out, source_names = c("Zostera", "Enteromorpha"))
> ##D 
> ##D # Compare multiple sources
> ##D compare_sources(simmr_1_out)
> ##D 
> ##D #####################################################################################
> ##D 
> ##D # A version with just one observation
> ##D data(geese_data_day1)
> ##D simmr_2 <- with(
> ##D   geese_data_day1,
> ##D   simmr_load(
> ##D     mixtures = mixtures[1, , drop = FALSE],
> ##D     source_names = source_names,
> ##D     source_means = source_means,
> ##D     source_sds = source_sds,
> ##D     correction_means = correction_means,
> ##D     correction_sds = correction_sds,
> ##D     concentration_means = concentration_means
> ##D   )
> ##D )
> ##D 
> ##D # Plot
> ##D plot(simmr_2)
> ##D 
> ##D # FFVB run - automatically detects the single observation
> ##D simmr_2_out <- simmr_ffvb(simmr_2)
> ##D 
> ##D # Print it
> ##D print(simmr_2_out)
> ##D 
> ##D # Summary
> ##D summary(simmr_2_out)
> ##D ans <- summary(simmr_2_out, type = c("quantiles"))
> ##D 
> ##D # Plot
> ##D plot(simmr_2_out)
> ##D plot(simmr_2_out, type = "boxplot")
> ##D plot(simmr_2_out, type = "histogram")
> ##D plot(simmr_2_out, type = "density")
> ##D plot(simmr_2_out, type = "matrix")
> ##D 
> ##D #####################################################################################
> ##D 
> ##D # Data set 2: 3 isotopes (d13C, d15N and d34S), 30 observations, 4 sources
> ##D data(simmr_data_2)
> ##D simmr_3 <- with(
> ##D   simmr_data_2,
> ##D   simmr_load(
> ##D     mixtures = mixtures,
> ##D     source_names = source_names,
> ##D     source_means = source_means,
> ##D     source_sds = source_sds,
> ##D     correction_means = correction_means,
> ##D     correction_sds = correction_sds,
> ##D     concentration_means = concentration_means
> ##D   )
> ##D )
> ##D 
> ##D # Get summary
> ##D print(simmr_3)
> ##D 
> ##D # Plot 3 times
> ##D plot(simmr_3)
> ##D plot(simmr_3, tracers = c(2, 3))
> ##D plot(simmr_3, tracers = c(1, 3))
> ##D # See vignette('simmr') for fancier axis labels
> ##D 
> ##D # FFVB run
> ##D simmr_3_out <- simmr_ffvb(simmr_3)
> ##D 
> ##D # Print it
> ##D print(simmr_3_out)
> ##D 
> ##D # Summary
> ##D summary(simmr_3_out)
> ##D summary(simmr_3_out, type = "quantiles")
> ##D summary(simmr_3_out, type = "correlations")
> ##D 
> ##D # Plot
> ##D plot(simmr_3_out)
> ##D plot(simmr_3_out, type = "boxplot")
> ##D plot(simmr_3_out, type = "histogram")
> ##D plot(simmr_3_out, type = "density")
> ##D plot(simmr_3_out, type = "matrix")
> ##D 
> ##D #####################################################################################
> ##D 
> ##D # Data set 4 - identified by Fry (2014) as a failing of SIMMs
> ##D # See the vignette for more interpreation of these data and the output
> ##D 
> ##D # The data
> ##D data(square_data)
> ##D simmr_4 <- with(
> ##D   square_data,
> ##D   simmr_load(
> ##D     mixtures = mixtures,
> ##D     source_names = source_names,
> ##D     source_means = source_means,
> ##D     source_sds = source_sds
> ##D   )
> ##D )
> ##D 
> ##D # Get summary
> ##D print(simmr_4)
> ##D 
> ##D # Plot
> ##D plot(simmr_4)
> ##D 
> ##D # FFVB run
> ##D simmr_4_out <- simmr_ffvb(simmr_4)
> ##D 
> ##D # Print it
> ##D print(simmr_4_out)
> ##D 
> ##D # Summary
> ##D summary(simmr_4_out)
> ##D ans <- summary(simmr_4_out, type = c("quantiles", "statistics"))
> ##D 
> ##D # Plot
> ##D plot(simmr_4_out)
> ##D plot(simmr_4_out, type = "boxplot")
> ##D plot(simmr_4_out, type = "histogram")
> ##D plot(simmr_4_out, type = "density")
> ##D plot(simmr_4_out, type = "matrix") # Look at the massive correlations here
> ##D 
> ##D #####################################################################################
> ##D 
> ##D # Data set 5 - Multiple groups Geese data from Inger et al 2006
> ##D 
> ##D # Do this in raw data format - Note that there's quite a few mixtures!
> ##D data(geese_data)
> ##D #  geese_data,
> ##D #  simmr_load(
> ##D #    mixtures = mixtures,
> ##D #    source_names = source_names,
> ##D #    source_means = source_means,
> ##D #    source_sds = source_sds,
> ##D #    correction_means = correction_means,
> ##D #    correction_sds = correction_sds,
> ##D #    concentration_means = concentration_means,
> ##D #    group = groups
> ##D #  )
> ##D 
> ##D # Plot
> ##D plot(simmr_5,
> ##D   xlab = expression(paste(delta^13, "C (\\u2030)", sep = "")),
> ##D   ylab = expression(paste(delta^15, "N (\\u2030)", sep = "")),
> ##D   title = "Isospace plot of Inger et al Geese data"
> ##D )
> ##D 
> ##D # Run MCMC for each group
> ##D simmr_5_out <- simmr_mcmc(simmr_5)
> ##D 
> ##D # Summarise output
> ##D summary(simmr_5_out, type = "quantiles", group = 1)
> ##D summary(simmr_5_out, type = "quantiles", group = c(1, 3))
> ##D summary(simmr_5_out, type = c("quantiles", "statistics"), group = c(1, 3))
> ##D 
> ##D # Plot - only a single group allowed
> ##D plot(simmr_5_out, type = "boxplot", group = 2, title = "simmr output group 2")
> ##D plot(simmr_5_out, type = c("density", "matrix"), grp = 6, title = "simmr output group 6")
> ##D 
> ##D # Compare sources within a group
> ##D compare_sources(simmr_5_out, source_names = c("Zostera", "U.lactuca"), group = 2)
> ##D compare_sources(simmr_5_out, group = 2)
> ##D 
> ##D # Compare between groups
> ##D compare_groups(simmr_5_out, source = "Zostera", groups = 1:2)
> ##D compare_groups(simmr_5_out, source = "Zostera", groups = 1:3)
> ##D compare_groups(simmr_5_out, source = "U.lactuca", groups = c(4:5, 7, 2))
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("simmr_ffvb", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("simmr_load")
> ### * simmr_load
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: simmr_load
> ### Title: Function to load in simmr data and check for errors
> ### Aliases: simmr_load
> 
> ### ** Examples
> 
> 
> # A simple example with 10 observations, 2 tracers and 4 sources
> #' data(geese_data_day1)
> simmr_1 <- with(
+   geese_data_day1,
+   simmr_load(
+     mixtures = mixtures,
+     source_names = source_names,
+     source_means = source_means,
+     source_sds = source_sds,
+     correction_means = correction_means,
+     correction_sds = correction_sds,
+     concentration_means = concentration_means
+   )
+ )
> 
> print(simmr_1)
This is a valid simmr input object with 9 observations, 2 tracers, and 4 sources.
The source names are: Zostera, Grass, U.lactuca, Enteromorpha.
The tracer names are: d13C_Pl, d15N_Pl.

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("simmr_load", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("simmr_mcmc")
> ### * simmr_mcmc
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: simmr_mcmc
> ### Title: Run a 'simmr_input' object through the main simmr Markov chain
> ###   Monte Carlo (MCMC) function
> ### Aliases: simmr_mcmc
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## See the package vignette for a detailed run through of these 4 examples
> ##D 
> ##D # Data set 1: 10 obs on 2 isos, 4 sources, with tefs and concdep
> ##D data(geese_data_day1)
> ##D simmr_1 <- with(
> ##D   geese_data_day1,
> ##D   simmr_load(
> ##D     mixtures = mixtures,
> ##D     source_names = source_names,
> ##D     source_means = source_means,
> ##D     source_sds = source_sds,
> ##D     correction_means = correction_means,
> ##D     correction_sds = correction_sds,
> ##D     concentration_means = concentration_means
> ##D   )
> ##D )
> ##D 
> ##D # Plot
> ##D plot(simmr_1)
> ##D 
> ##D # Print
> ##D simmr_1
> ##D 
> ##D # MCMC run
> ##D simmr_1_out <- simmr_mcmc(simmr_1)
> ##D 
> ##D # Print it
> ##D print(simmr_1_out)
> ##D 
> ##D # Summary
> ##D summary(simmr_1_out, type = "diagnostics")
> ##D summary(simmr_1_out, type = "correlations")
> ##D summary(simmr_1_out, type = "statistics")
> ##D ans <- summary(simmr_1_out, type = c("quantiles", "statistics"))
> ##D 
> ##D # Plot
> ##D plot(simmr_1_out, type = "boxplot")
> ##D plot(simmr_1_out, type = "histogram")
> ##D plot(simmr_1_out, type = "density")
> ##D plot(simmr_1_out, type = "matrix")
> ##D 
> ##D # Compare two sources
> ##D compare_sources(simmr_1_out, source_names = c("Zostera", "Enteromorpha"))
> ##D 
> ##D # Compare multiple sources
> ##D compare_sources(simmr_1_out)
> ##D 
> ##D #####################################################################################
> ##D 
> ##D # A version with just one observation
> ##D data(geese_data_day1)
> ##D simmr_2 <- with(
> ##D   geese_data_day1,
> ##D   simmr_load(
> ##D     mixtures = mixtures[1, , drop = FALSE],
> ##D     source_names = source_names,
> ##D     source_means = source_means,
> ##D     source_sds = source_sds,
> ##D     correction_means = correction_means,
> ##D     correction_sds = correction_sds,
> ##D     concentration_means = concentration_means
> ##D   )
> ##D )
> ##D 
> ##D # Plot
> ##D plot(simmr_2)
> ##D 
> ##D # MCMC run - automatically detects the single observation
> ##D simmr_2_out <- simmr_mcmc(simmr_2)
> ##D 
> ##D # Print it
> ##D print(simmr_2_out)
> ##D 
> ##D # Summary
> ##D summary(simmr_2_out)
> ##D summary(simmr_2_out, type = "diagnostics")
> ##D ans <- summary(simmr_2_out, type = c("quantiles"))
> ##D 
> ##D # Plot
> ##D plot(simmr_2_out)
> ##D plot(simmr_2_out, type = "boxplot")
> ##D plot(simmr_2_out, type = "histogram")
> ##D plot(simmr_2_out, type = "density")
> ##D plot(simmr_2_out, type = "matrix")
> ##D 
> ##D #####################################################################################
> ##D 
> ##D # Data set 2: 3 isotopes (d13C, d15N and d34S), 30 observations, 4 sources
> ##D data(simmr_data_2)
> ##D simmr_3 <- with(
> ##D   simmr_data_2,
> ##D   simmr_load(
> ##D     mixtures = mixtures,
> ##D     source_names = source_names,
> ##D     source_means = source_means,
> ##D     source_sds = source_sds,
> ##D     correction_means = correction_means,
> ##D     correction_sds = correction_sds,
> ##D     concentration_means = concentration_means
> ##D   )
> ##D )
> ##D 
> ##D # Get summary
> ##D print(simmr_3)
> ##D 
> ##D # Plot 3 times
> ##D plot(simmr_3)
> ##D plot(simmr_3, tracers = c(2, 3))
> ##D plot(simmr_3, tracers = c(1, 3))
> ##D # See vignette('simmr') for fancier axis labels
> ##D 
> ##D # MCMC run
> ##D simmr_3_out <- simmr_mcmc(simmr_3)
> ##D 
> ##D # Print it
> ##D print(simmr_3_out)
> ##D 
> ##D # Summary
> ##D summary(simmr_3_out)
> ##D summary(simmr_3_out, type = "diagnostics")
> ##D summary(simmr_3_out, type = "quantiles")
> ##D summary(simmr_3_out, type = "correlations")
> ##D 
> ##D # Plot
> ##D plot(simmr_3_out)
> ##D plot(simmr_3_out, type = "boxplot")
> ##D plot(simmr_3_out, type = "histogram")
> ##D plot(simmr_3_out, type = "density")
> ##D plot(simmr_3_out, type = "matrix")
> ##D 
> ##D #####################################################################################
> ##D 
> ##D # Data set 4 - identified by Fry (2014) as a failing of SIMMs
> ##D # See the vignette for more interpreation of these data and the output
> ##D 
> ##D # The data
> ##D data(square_data)
> ##D simmr_4 <- with(
> ##D   square_data,
> ##D   simmr_load(
> ##D     mixtures = mixtures,
> ##D     source_names = source_names,
> ##D     source_means = source_means,
> ##D     source_sds = source_sds
> ##D   )
> ##D )
> ##D 
> ##D # Get summary
> ##D print(simmr_4)
> ##D 
> ##D # Plot
> ##D plot(simmr_4)
> ##D 
> ##D # MCMC run - needs slightly longer
> ##D simmr_4_out <- simmr_mcmc(simmr_4)
> ##D 
> ##D # Print it
> ##D print(simmr_4_out)
> ##D 
> ##D # Summary
> ##D summary(simmr_4_out)
> ##D summary(simmr_4_out, type = "diagnostics")
> ##D ans <- summary(simmr_4_out, type = c("quantiles", "statistics"))
> ##D 
> ##D # Plot
> ##D plot(simmr_4_out)
> ##D plot(simmr_4_out, type = "boxplot")
> ##D plot(simmr_4_out, type = "histogram")
> ##D plot(simmr_4_out, type = "density")
> ##D plot(simmr_4_out, type = "matrix") # Look at the massive correlations here
> ##D 
> ##D #####################################################################################
> ##D 
> ##D # Data set 5 - Multiple groups Geese data from Inger et al 2006
> ##D 
> ##D # Do this in raw data format - Note that there's quite a few mixtures!
> ##D data(geese_data)
> ##D simmr_5 <- with(
> ##D   geese_data,
> ##D   simmr_load(
> ##D     mixtures = mixtures,
> ##D     source_names = source_names,
> ##D     source_means = source_means,
> ##D     source_sds = source_sds,
> ##D     correction_means = correction_means,
> ##D     correction_sds = correction_sds,
> ##D     concentration_means = concentration_means,
> ##D     group = groups
> ##D   )
> ##D )
> ##D 
> ##D # Plot
> ##D plot(simmr_5,
> ##D   xlab = expression(paste(delta^13, "C (\\u2030)", sep = "")),
> ##D   ylab = expression(paste(delta^15, "N (\\u2030)", sep = "")),
> ##D   title = "Isospace plot of Inger et al Geese data"
> ##D )
> ##D 
> ##D # Run MCMC for each group
> ##D simmr_5_out <- simmr_mcmc(simmr_5)
> ##D 
> ##D # Summarise output
> ##D summary(simmr_5_out, type = "quantiles", group = 1)
> ##D summary(simmr_5_out, type = "quantiles", group = c(1, 3))
> ##D summary(simmr_5_out, type = c("quantiles", "statistics"), group = c(1, 3))
> ##D 
> ##D # Plot - only a single group allowed
> ##D plot(simmr_5_out, type = "boxplot", group = 2, title = "simmr output group 2")
> ##D plot(simmr_5_out, type = c("density", "matrix"), grp = 6, title = "simmr output group 6")
> ##D 
> ##D # Compare sources within a group
> ##D compare_sources(simmr_5_out, source_names = c("Zostera", "U.lactuca"), group = 2)
> ##D compare_sources(simmr_5_out, group = 2)
> ##D 
> ##D # Compare between groups
> ##D compare_groups(simmr_5_out, source = "Zostera", groups = 1:2)
> ##D compare_groups(simmr_5_out, source = "Zostera", groups = 1:3)
> ##D compare_groups(simmr_5_out, source = "U.lactuca", groups = c(4:5, 7, 2))
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("simmr_mcmc", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("simmr_mcmc_tdf")
> ### * simmr_mcmc_tdf
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: simmr_mcmc_tdf
> ### Title: Estimate correction factors from stable isotope data with known
> ###   dietary proportions
> ### Aliases: simmr_mcmc_tdf
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## Example of estimating TDFs for a simple system with known dietary proportions
> ##D 
> ##D # Data set 1: 10 obs on 2 isos, 4 sources, with tefs and concdep
> ##D # Assume p = c(0.25, 0.25, 0.25, 0.25)
> ##D 
> ##D # The data
> ##D data(simmr_data_1)
> ##D # Load into simmr
> ##D simmr_tdf <- with(
> ##D   simmr_data_1,
> ##D   simmr_load(
> ##D     mixtures = mixtures,
> ##D     source_names = source_names,
> ##D     source_means = source_means,
> ##D     source_sds = source_sds,
> ##D     correction_means = correction_means,
> ##D     correction_sds = correction_sds,
> ##D     concentration_means = concentration_means
> ##D   )
> ##D )
> ##D 
> ##D # Plot
> ##D plot(simmr_tdf)
> ##D 
> ##D # MCMC run
> ##D simmr_tdf_out <- simmr_mcmc_tdf(simmr_tdf,
> ##D   p = matrix(
> ##D     rep(
> ##D       1 / simmr_tdf$n_sources,
> ##D       simmr_tdf$n_sources
> ##D     ),
> ##D     ncol = simmr_tdf$n_sources,
> ##D     nrow = simmr_tdf$n_obs,
> ##D     byrow = TRUE
> ##D   )
> ##D )
> ##D 
> ##D # Summary
> ##D summary(simmr_tdf_out, type = "diagnostics")
> ##D summary(simmr_tdf_out, type = "quantiles")
> ##D 
> ##D # Now put these corrections back into the model and check the
> ##D # iso-space plots and dietary output
> ##D simmr_tdf_2 <- with(
> ##D   simmr_data_1,
> ##D   simmr_load(
> ##D     mixtures = mixtures,
> ##D     source_names = source_names,
> ##D     source_means = source_means,
> ##D     source_sds = source_sds,
> ##D     correction_means = simmr_tdf_out$c_mean_est,
> ##D     correction_sds = simmr_tdf_out$c_sd_est,
> ##D     concentration_means = concentration_means
> ##D   )
> ##D )
> ##D 
> ##D # Plot with corrections now
> ##D plot(simmr_tdf_2)
> ##D 
> ##D simmr_tdf_2_out <- simmr_mcmc(simmr_tdf_2)
> ##D summary(simmr_tdf_2_out, type = "diagnostics")
> ##D plot(simmr_tdf_2_out, type = "boxplot")
> ## End(Not run)
> 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("simmr_mcmc_tdf", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("summary.simmr_output")
> ### * summary.simmr_output
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: summary.simmr_output
> ### Title: Summarises the output created with 'simmr_mcmc'
> ### Aliases: summary.simmr_output
> 
> ### ** Examples
> 
> ## Not run: 
> ##D # A simple example with 10 observations, 2 tracers and 4 sources
> ##D 
> ##D # The data
> ##D data(geese_data_day1)
> ##D simmr_1 <- with(
> ##D   geese_data_day1,
> ##D   simmr_load(
> ##D     mixtures = mixtures,
> ##D     source_names = source_names,
> ##D     source_means = source_means,
> ##D     source_sds = source_sds,
> ##D     correction_means = correction_means,
> ##D     correction_sds = correction_sds,
> ##D     concentration_means = concentration_means
> ##D   )
> ##D )
> ##D 
> ##D # Plot
> ##D plot(simmr_1)
> ##D 
> ##D 
> ##D # MCMC run
> ##D simmr_1_out <- simmr_mcmc(simmr_1)
> ##D 
> ##D # Summarise
> ##D summary(simmr_1_out) # This outputs all the summaries
> ##D summary(simmr_1_out, type = "diagnostics") # Just the diagnostics
> ##D # Store the output in an
> ##D ans <- summary(simmr_1_out,
> ##D   type = c("quantiles", "statistics")
> ##D )
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("summary.simmr_output", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.459 0.063 1.723 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
